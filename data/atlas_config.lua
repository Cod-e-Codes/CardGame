--[[
Sprite Atlas Configuration

Defines the texture coordinates for all sprites in the packed atlas.
This would typically be generated by a sprite packing tool like
TexturePacker, Aseprite, or a custom build script.

Atlas Format:
- Total Size: 2048x2048 pixels
- Individual Card Art: 256x256 pixels each
- UI Elements: Variable sizes
- Padding: 2 pixels between sprites
--]]

local AtlasConfig = {
    -- Atlas image file
    image_path = "assets/images/atlas.png",
    
    -- Atlas dimensions
    width = 2048,
    height = 2048,
    
    -- Card artwork sprites (256x256 each)
    cards = {
        fire_sprite = {x = 0, y = 0, w = 256, h = 256},
        water_elemental = {x = 258, y = 0, w = 256, h = 256},
        earth_guardian = {x = 516, y = 0, w = 256, h = 256},
        air_wisp = {x = 774, y = 0, w = 256, h = 256},
        
        lightning_bolt = {x = 0, y = 258, w = 256, h = 256},
        healing_potion = {x = 258, y = 258, w = 256, h = 256},
        fireball = {x = 516, y = 258, w = 256, h = 256},
        
        crystal_blade = {x = 774, y = 258, w = 256, h = 256},
        mana_crystal = {x = 0, y = 516, w = 256, h = 256},
        shield_of_valor = {x = 258, y = 516, w = 256, h = 256},
        
        dragon_lord = {x = 516, y = 516, w = 256, h = 256},
        phoenix_rebirth = {x = 774, y = 516, w = 256, h = 256},
        
        -- Spell effects
        time_warp = {x = 0, y = 774, w = 256, h = 256},
        chain_lightning = {x = 258, y = 774, w = 256, h = 256},
        
        -- Token cards
        spark_token = {x = 516, y = 774, w = 256, h = 256},
        treasure_token = {x = 774, y = 774, w = 256, h = 256}
    },
    
    -- Card back (special position)
    card_back = {x = 1032, y = 0, w = 256, h = 256},
    
    -- UI elements
    ui = {
        -- Buttons (128x64 each)
        button_normal = {x = 1290, y = 0, w = 128, h = 64},
        button_hover = {x = 1290, y = 66, w = 128, h = 64},
        button_pressed = {x = 1290, y = 132, w = 128, h = 64},
        
        -- Frames and borders
        frame_corner = {x = 1420, y = 0, w = 32, h = 32},
        frame_edge_h = {x = 1454, y = 0, w = 32, h = 16},
        frame_edge_v = {x = 1420, y = 34, w = 16, h = 32},
        
        -- Icons (64x64 each)
        mana_icon = {x = 1290, y = 200, w = 64, h = 64},
        attack_icon = {x = 1356, y = 200, w = 64, h = 64},
        health_icon = {x = 1290, y = 266, w = 64, h = 64},
        
        -- Particle effects (32x32 each)
        spark_particle = {x = 1356, y = 266, w = 32, h = 32},
        glow_particle = {x = 1390, y = 266, w = 32, h = 32},
        
        -- Status effects
        burn_effect = {x = 1290, y = 332, w = 48, h = 48},
        freeze_effect = {x = 1340, y = 332, w = 48, h = 48},
        poison_effect = {x = 1390, y = 332, w = 48, h = 48}
    },
    
    -- Animated sprites (for future expansion)
    animations = {
        card_flip = {
            frames = 8,
            frame_width = 128,
            frame_height = 128,
            start_x = 1032,
            start_y = 258,
            duration = 0.5
        },
        
        mana_sparkle = {
            frames = 6,
            frame_width = 64,
            frame_height = 64,
            start_x = 1032,
            start_y = 390,
            duration = 0.8
        }
    }
}

-- Utility function to get quad for sprite
function AtlasConfig.getQuad(sprite_name, category)
    category = category or "cards"
    local sprite_data = AtlasConfig[category] and AtlasConfig[category][sprite_name]
    
    if not sprite_data then
        print("Warning: Sprite not found: " .. sprite_name .. " in category: " .. category)
        return nil
    end
    
    return love.graphics.newQuad(
        sprite_data.x, sprite_data.y, 
        sprite_data.w, sprite_data.h,
        AtlasConfig.width, AtlasConfig.height
    )
end

-- Generate atlas quads for card renderer
function AtlasConfig.generateCardQuads()
    local quads = {}
    
    for card_id, sprite_data in pairs(AtlasConfig.cards) do
        quads[card_id] = love.graphics.newQuad(
            sprite_data.x, sprite_data.y,
            sprite_data.w, sprite_data.h,
            AtlasConfig.width, AtlasConfig.height
        )
    end
    
    return quads
end

-- Generate UI quads
function AtlasConfig.generateUIQuads()
    local quads = {}
    
    for ui_element, sprite_data in pairs(AtlasConfig.ui) do
        quads[ui_element] = love.graphics.newQuad(
            sprite_data.x, sprite_data.y,
            sprite_data.w, sprite_data.h,
            AtlasConfig.width, AtlasConfig.height
        )
    end
    
    return quads
end

return AtlasConfig
